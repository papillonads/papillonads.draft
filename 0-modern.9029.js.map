{"version":3,"sources":["webpack:////Users/mts/PapHub/papillonads.nl/node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","treeRenderingInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","observableQueryFields","currentResult","partial","errors","length","graphQLErrors","partialRefetch","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","updatedOptions","queryDataRef","current","queryData","memoFn","key","ref","memo","value","queryResult","useQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":";yFAAA,mFAQIA,EAAiB,WACjB,SAASA,EAAcC,EAASC,GAC5BC,KAAKC,WAAY,EACjBD,KAAKE,gBAAkB,GACvBF,KAAKD,QAAU,GACfC,KAAKF,QAAU,GACfE,KAAKF,QAAUA,GAAW,GAC1BE,KAAKD,QAAUA,GAAW,GAuC9B,OArCAF,EAAcM,UAAUC,WAAa,WACjC,OAAOJ,KAAKF,SAEhBD,EAAcM,UAAUE,WAAa,SAAUC,EAAYC,QACjC,IAAlBA,IAA4BA,GAAgB,GAC5CA,IAAkB,YAAMP,KAAKF,QAASQ,KACtCN,KAAKE,gBAAkBF,KAAKF,SAEhCE,KAAKF,QAAUQ,GAEnBT,EAAcM,UAAUK,QAAU,WAC9BR,KAAKC,WAAY,GAErBJ,EAAcM,UAAUM,cAAgB,WACpC,IAAIC,EAAUV,KAAKF,SAAWE,KAAKF,QAAQY,QACtCV,KAAKD,SAAWC,KAAKD,QAAQW,OACM,cAAYA,EAAQ,GAG5D,IAAIC,GAAQ,EAMZ,OALID,IAAWV,KAAKU,SAChBC,GAAQ,EACRX,KAAKU,OAASA,EACdV,KAAKY,WAEF,CACHF,OAAQV,KAAKU,OACbC,MAAOA,IAGfd,EAAcM,UAAUU,mBAAqB,SAAUC,EAAUC,GAC7D,IAAIC,EAAY,YAAOF,GACK,YAAcC,GAClB,YAAcC,EAAUD,MACR,YAAUC,EAAUD,OAASA,EAAM,IAGxElB,EA9CS,GAiDhBoB,EAAa,SAAUC,GAEvB,SAASD,EAAUE,GACf,IAAIrB,EAAUqB,EAAGrB,QAASC,EAAUoB,EAAGpB,QAASqB,EAAcD,EAAGC,YAC7DC,EAAQH,EAAOI,KAAKtB,KAAMF,EAASC,IAAYC,KAgCnD,OA/BAqB,EAAME,aAAe,GACrBF,EAAMG,kBAAoB,GAC1BH,EAAMI,SAAU,EAChBJ,EAAMK,aAAe,SAAU5B,GAC3BuB,EAAMT,UACNS,EAAMI,SAAU,EAChBJ,EAAMM,YAAc7B,EACpBuB,EAAMD,eAEVC,EAAMO,iBAAmB,WACrB,IAAIC,EAASR,EAAMS,iBAEnB,OADAT,EAAMU,yBACCF,GAEXR,EAAMW,WAAa,SAAUC,GACzB,OAAOZ,EAAMG,kBAAkBU,MAAMC,QAAQF,IAEjDZ,EAAMe,aAAe,SAAUC,GAAoB,OAAOhB,EAAMG,kBAAkBU,MAAMI,UAAUD,IAClGhB,EAAMkB,eAAiB,SAAUC,GAAS,OAAOnB,EAAMG,kBAAkBU,MAAMO,YAAYD,IAC3FnB,EAAMqB,gBAAkB,SAAUC,GAC9BtB,EAAMG,mBACFH,EAAMG,kBAAkBU,OACxBb,EAAMG,kBAAkBU,MAAMU,aAAaD,IAEnDtB,EAAMwB,eAAiB,WACnBxB,EAAMG,mBACFH,EAAMG,kBAAkBU,OACxBb,EAAMG,kBAAkBU,MAAMY,eAEtCzB,EAAM0B,mBAAqB,SAAUjD,GAAW,OAAOuB,EAAMG,kBAAkBU,MAAMc,gBAAgBlD,IACrGuB,EAAMD,YAAcA,EACbC,EA8PX,OAjSA,YAAUJ,EAAWC,GAqCrBD,EAAUd,UAAU8C,QAAU,WAC1BjD,KAAKS,gBACL,IAAIU,EAAKnB,KAAKI,aAAc8C,EAAO/B,EAAG+B,KAAMhB,EAAQf,EAAGe,MAQvD,OAPIgB,GAAQhB,IAAUlC,KAAKuB,aAAaW,SACpClC,KAAKmD,0BACLnD,KAAKuB,aAAaW,MAAQA,GAE9BlC,KAAKoD,wBACDpD,KAAKC,WACLD,KAAK+B,yBACF/B,KAAKqD,uBAAyBrD,KAAK4B,oBAE9CX,EAAUd,UAAUmD,YAAc,WAC9B,OAAQtD,KAAKyB,QAUP,CAACzB,KAAK0B,aAAc1B,KAAKiD,WATzB,CACEjD,KAAK0B,aACL,CACI6B,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,EACRC,UAAMC,KAKtB3C,EAAUd,UAAU0D,UAAY,WAC5B,IAAI/D,EAAUE,KAAKI,aACnB,GAAIN,EAAQoD,OAAwB,IAAhBpD,EAAQgE,IACxB,OAAO,EACX,IAAIC,EAAM/D,KAAKwB,kBAAkBU,MAEjC,QADoB6B,EAAIC,mBACHT,SAAUQ,EAAIlC,UAEvCZ,EAAUd,UAAU8D,aAAe,SAAU9C,GACzC,IAAIE,EAAQrB,KACRkE,QAAa,IAAP/C,EAAgB,GAAKA,GAAIgD,KAAMA,OAAc,IAAPD,GAAwBA,EAUxE,OATAlE,KAAKC,WAAY,EACZkE,IAAQnE,KAAKyB,UACdzB,KAAKoE,yBACLC,YAAW,WACPhD,EAAMG,kBAAkBU,OACpBb,EAAMG,kBAAkBU,MAAMoC,4BAG1CtE,KAAKE,gBAAkBF,KAAKI,aACrBJ,KAAKQ,QAAQ+D,KAAKvE,OAE7BiB,EAAUd,UAAUS,QAAU,WAC1BZ,KAAKmD,iCACEnD,KAAKwB,kBAAkBU,aACvBlC,KAAKuB,aAAaM,QAE7BZ,EAAUd,UAAUC,WAAa,WAC7B,IAAIN,EAAUoB,EAAOf,UAAUC,WAAWkB,KAAKtB,MAQ/C,OAPIA,KAAK2B,cACL7B,EAAQmC,UAAY,YAAS,YAAS,GAAInC,EAAQmC,WAAYjC,KAAK2B,YAAYM,WAC/EnC,EAAQC,QAAU,YAAS,YAAS,GAAID,EAAQC,SAAUC,KAAK2B,YAAY5B,UAE3EC,KAAKyB,gBACE3B,EAAQoD,KAEZpD,GAEXmB,EAAUd,UAAUkD,oBAAsB,WACtC,IAYIxB,EAZA2C,EAAyBxE,KAAKD,SAAWC,KAAKD,QAAQ0E,eACtDC,GAAwC,IAA1B1E,KAAKI,aAAa0D,IAChCa,EAAgB3E,KAAKS,gBAAgBC,OAAOkE,sBAC5CC,EAAa,CACbtB,SAAS,EACTC,cAAe,IAAcD,QAC7BG,QAAQ,EACRC,UAAMC,GAEV,OAAIc,IAAgBF,GAA0BG,GACnCE,GAGPL,IACA3C,EACI7B,KAAKD,QAAQ0E,eAAeK,gBAAgB9E,KAAMA,KAAK4B,mBAAqBiD,GAE7EhD,IAEXZ,EAAUd,UAAU4E,8BAAgC,WAChD,IAAIjF,EAAUE,KAAKI,aACnBJ,KAAKa,mBAAmBf,EAAQoC,MAAO,IAAa8C,OACpD,IAAIC,EAAcnF,EAAQmF,aAAe,QAOzC,OANIjF,KAAKD,SACLC,KAAKD,QAAQ0E,iBACY,iBAAxB3E,EAAQoF,aACmB,sBAAxBpF,EAAQoF,eACZpF,EAAQoF,YAAc,eAEnB,YAAS,YAAS,GAAIpF,GAAU,CAAEmF,YAAaA,EAAalF,QAASD,EAAQC,QAASoF,SAAU,CAAEC,eAAgB,CAAEH,YAAaA,OAE5IhE,EAAUd,UAAUkF,0BAA4B,WAI5C,GAHIrF,KAAKD,SAAWC,KAAKD,QAAQ0E,iBAC7BzE,KAAKwB,kBAAkBU,MAAQlC,KAAKD,QAAQ0E,eAAea,iBAAiBtF,KAAKI,gBAEhFJ,KAAKwB,kBAAkBU,MAAO,CAC/B,IAAIqD,EAAyBvF,KAAK+E,gCAClC/E,KAAKuB,aAAagE,uBAAyB,YAAS,YAAS,GAAIA,GAAyB,CAAEC,SAAU,OACtGxF,KAAKwB,kBAAkBU,MAAQlC,KAAKS,gBAAgBC,OAAO+E,WAAW,YAAS,GAAIF,IAC/EvF,KAAKD,SAAWC,KAAKD,QAAQ0E,gBAC7BzE,KAAKD,QAAQ0E,eAAeiB,sBAAsB1F,KAAKwB,kBAAkBU,MAAOqD,KAI5FtE,EAAUd,UAAUiD,sBAAwB,WACxC,GAAKpD,KAAKwB,kBAAkBU,MAA5B,CAIA,IAAIyD,EAA4B,YAAS,YAAS,GAAI3F,KAAK+E,iCAAkC,CAAES,SAAU,OACpG,YAAMG,EAA2B3F,KAAKuB,aAAagE,0BACpDvF,KAAKuB,aAAagE,uBAAyBI,EAC3C3F,KAAKwB,kBACAU,MAAM7B,WAAWsF,GACjBC,OAAM,qBARX5F,KAAKqF,6BAWbpE,EAAUd,UAAU4B,uBAAyB,WACzC,IAAIV,EAAQrB,KACZ,IAAIA,KAAKwB,kBAAkBqE,eAAgB7F,KAAKI,aAAa8C,KAA7D,CAEA,IAAI4C,EAAW9F,KAAKwB,kBAAkBU,MACtClC,KAAKwB,kBAAkBqE,aAAeC,EAASC,UAAU,CACrDC,KAAM,SAAU7E,GACZ,IAAIoC,EAAUpC,EAAGoC,QAASC,EAAgBrC,EAAGqC,cAAeG,EAAOxC,EAAGwC,KAClEsC,EAAiB5E,EAAME,aAAaM,OACpCoE,GACAA,EAAe1C,UAAYA,GAC3B0C,EAAezC,gBAAkBA,GACjC,YAAMyC,EAAetC,KAAMA,IAG/BtC,EAAMD,eAEV8E,MAAO,SAAUA,GAEb,GADA7E,EAAM8E,sBACDD,EAAME,eAAe,iBACtB,MAAMF,EACV,IAAID,EAAiB5E,EAAME,aAAaM,QACnCoE,GAAkBA,EAAe1C,UACjC,YAAM2C,EAAO7E,EAAME,aAAa2E,UACjC7E,EAAME,aAAa2E,MAAQA,EAC3B7E,EAAMD,oBAKtBH,EAAUd,UAAUgG,mBAAqB,WACrCnG,KAAKmD,0BACL,IAAIkD,EAAYrG,KAAKwB,kBAAkBU,MAAMoE,eACzCC,EAAavG,KAAKwB,kBAAkBU,MAAMsE,gBAC9CxG,KAAKwB,kBAAkBU,MAAMuE,mBAC7BzG,KAAK+B,yBACL2E,OAAOC,OAAO3G,KAAKwB,kBAAkBU,MAAO,CACxCmE,UAAWA,EACXE,WAAYA,KAGpBtF,EAAUd,UAAU2B,eAAiB,WACjC,IAAID,EAAS7B,KAAK4G,wBACd9G,EAAUE,KAAKI,aACnB,GAAIN,EAAQoD,KACRrB,EAAS,YAAS,YAAS,GAAIA,GAAS,CAAE8B,UAAMC,EAAWsC,WAAOtC,EAAWL,SAAS,EAAOG,QAAQ,QAEpG,CACD,IAAImD,EAAgB7G,KAAKwB,kBAAkBU,MAAM8B,mBAC7CT,EAAUsD,EAActD,QAASuD,EAAUD,EAAcC,QAAStD,EAAgBqD,EAAcrD,cAAeuD,EAASF,EAAcE,OACtIb,EAAQW,EAAcX,MAAOvC,EAAOkD,EAAclD,KAOtD,GANIoD,GAAUA,EAAOC,OAAS,IAC1Bd,EAAQ,IAAI,IAAY,CAAEe,cAAeF,KAE7ClF,EAAS,YAAS,YAAS,GAAIA,GAAS,CAAE0B,QAASA,EAC/CC,cAAeA,EACf0C,MAAOA,EAAOxC,QAAQ,IACtBH,EAAS,CACT,IAAIhC,EAAevB,KAAKuB,aAAaM,QAAU7B,KAAKuB,aAAaM,OAAO8B,KACxE9B,EAAO8B,KACHpC,GAAgBoC,EACV,YAAS,YAAS,GAAIpC,GAAeoC,GAAQpC,GAAgBoC,OAEtE,GAAIuC,EACLQ,OAAOC,OAAO9E,EAAQ,CAClB8B,MAAO3D,KAAKwB,kBAAkBU,MAAMsE,iBAAmB,IAClD7C,WAGR,CACD,IAAIuB,EAAclF,KAAKwB,kBAAkBU,MAAMpC,QAAQoF,YAEvD,GADqBpF,EAAQoH,iBAExBvD,GACDmD,GACgB,eAAhB5B,EAMA,OALAwB,OAAOC,OAAO9E,EAAQ,CAClB0B,SAAS,EACTC,cAAe,IAAcD,UAEjC1B,EAAOM,UACAN,EAEXA,EAAO8B,KAAOA,GAOtB,OAJA9B,EAAOnB,OAASV,KAAKU,OACrBV,KAAKuB,aAAagC,QACbvD,KAAKuB,aAAaM,QAAU7B,KAAKuB,aAAaM,OAAO0B,UAAY,EACtEvD,KAAKuB,aAAaM,OAASA,EACpBA,GAEXZ,EAAUd,UAAUiE,uBAAyB,WACzC,IAAI0B,EAAW9F,KAAKwB,kBAAkBU,MACtC,GAAK4D,EAAL,CAEA,IAAI3E,EAAK2E,EAAS9B,mBAAoBL,EAAOxC,EAAGwC,KAAMJ,EAAUpC,EAAGoC,QAAS2C,EAAQ/E,EAAG+E,MACvF,IAAK3C,EAAS,CACV,IAAIW,EAAKlE,KAAKI,aAAc8B,EAAQgC,EAAGhC,MAAOD,EAAYiC,EAAGjC,UAAWkF,EAAcjD,EAAGiD,YAAaC,EAAUlD,EAAGkD,QACnH,GAAIpH,KAAKE,kBACJF,KAAKuB,aAAagC,SACnB,YAAMvD,KAAKE,gBAAgBgC,MAAOA,IAClC,YAAMlC,KAAKE,gBAAgB+B,UAAWA,GACtC,OAEAkF,IAAgBjB,EAChBiB,EAAYxD,GAEPyD,GAAWlB,GAChBkB,EAAQlB,MAIpBjF,EAAUd,UAAUgD,wBAA0B,WACtCnD,KAAKwB,kBAAkBqE,eACvB7F,KAAKwB,kBAAkBqE,aAAawB,qBAC7BrH,KAAKwB,kBAAkBqE,eAGtC5E,EAAUd,UAAUyG,sBAAwB,WAExC,MAAO,CACH3E,UAFajC,KAAKwB,kBAAkBU,MAEdD,UACtBE,QAASnC,KAAKgC,WACdM,UAAWtC,KAAKoC,aAChBK,YAAazC,KAAKuC,eAClBK,aAAc5C,KAAK0C,gBACnBI,YAAa9C,KAAK6C,eAClBG,gBAAiBhD,KAAK+C,qBAGvB9B,EAlSK,CAmSdpB,GAUF,SAASyH,EAAapF,EAAOpC,EAASqE,QACrB,IAATA,IAAmBA,GAAO,GAC9B,IAAIpE,EAAU,qBAAW,eACrBoB,EAAK,sBAAW,SAAUoG,GAAK,OAAOA,EAAI,IAAM,GAAIC,EAAOrG,EAAG,GAAIC,EAAcD,EAAG,GACnFsG,EAAiB3H,EAAU,YAAS,YAAS,GAAIA,GAAU,CAAEoC,MAAOA,IAAW,CAAEA,MAAOA,GACxFwF,EAAe,mBACdA,EAAaC,UACdD,EAAaC,QAAU,IAAI1G,EAAU,CACjCnB,QAAS2H,EACT1H,QAASA,EACTqB,YAAaA,KAGrB,IAAIwG,EAAYF,EAAaC,QAC7BC,EAAUvH,WAAWoH,GACrBG,EAAU7H,QAAUA,EACpB,IAxBiB8H,EAAQC,EACrBC,EAuBAC,EAAO,CACPlI,QAAS,YAAS,YAAS,GAAI2H,GAAiB,CAAEL,aAASxD,EAAWuD,iBAAavD,IACnF7D,QAASA,EACTyH,KAAMA,GAEN3F,GA7BagG,EA6BQ,WAAc,OAAQ1D,EAAOyD,EAAUtE,cAAgBsE,EAAU3E,WA7BjE6E,EA6BgFE,GA5BrGD,EAAM,oBACDJ,SAAY,YAAMG,EAAKC,EAAIJ,QAAQG,OACxCC,EAAIJ,QAAU,CAAEG,IAAKA,EAAKG,MAAOJ,MAE9BE,EAAIJ,QAAQM,OAyBfC,EAAc/D,EACZtC,EAAO,GACPA,EAUN,OATA,qBAAU,WAAc,OAAO+F,EAAU3D,aAAa,CAAEE,KAAMA,MAAY,CACtE+D,EAAY3E,QACZ2E,EAAY1E,cACZ0E,EAAYhC,MACZgC,EAAYvE,OAEhB,qBAAU,WACN,OAAO,WAAc,OAAOiE,EAAUhH,aACvC,IACIiB,EAGX,SAASsG,EAASjG,EAAOpC,GACrB,OAAOwH,EAAapF,EAAOpC,GAAS,IAOpB,SAAUoB,GAE1B,SAASkH,EAAajH,GAClB,IAAIrB,EAAUqB,EAAGrB,QAASC,EAAUoB,EAAGpB,QAAS8B,EAASV,EAAGU,OAAQwG,EAAYlH,EAAGkH,UAC/EhH,EAAQH,EAAOI,KAAKtB,KAAMF,EAASC,IAAYC,KAoBnD,OAnBAqB,EAAMiH,YAAc,SAAUC,QACM,IAA5BA,IAAsCA,EAA0B,IACpElH,EAAMmH,kBACN,IAAIC,EAAapH,EAAMqH,wBACvB,OAAOrH,EAAMsH,OAAOJ,GACfK,MAAK,SAAUC,GAEhB,OADAxH,EAAMyH,oBAAoBD,EAAUJ,GAC7BI,KAENjD,OAAM,SAAUM,GAEjB,GADA7E,EAAM0H,gBAAgB7C,EAAOuC,IACxBpH,EAAMjB,aAAagH,QACpB,MAAMlB,MAGlB7E,EAAMR,mBAAmBf,EAAQkJ,SAAU,IAAaC,UACxD5H,EAAMQ,OAASA,EACfR,EAAMgH,UAAYA,EAClBhH,EAAM6H,qBAAuB,EACtB7H,EAvBX,YAAU+G,EAAclH,GAyBxBkH,EAAajI,UAAU8C,QAAU,SAAUpB,GAIvC,OAHA7B,KAAKC,WAAY,EACjBD,KAAKa,mBAAmBb,KAAKI,aAAa4I,SAAU,IAAaC,UACjEpH,EAAOnB,OAASV,KAAKS,gBAAgBC,OAC9B,CAACV,KAAKsI,YAAazG,IAE9BuG,EAAajI,UAAU8D,aAAe,WAElC,OADAjE,KAAKC,WAAY,EACVD,KAAKQ,QAAQ+D,KAAKvE,OAE7BoI,EAAajI,UAAUS,QAAU,aAEjCwH,EAAajI,UAAUwI,OAAS,SAAUJ,GACtC,IAAIpH,EAAKnB,KAAKI,aAAc4I,EAAW7H,EAAG6H,SAAU/G,EAAYd,EAAGc,UAAWkH,EAAqBhI,EAAGgI,mBAAoBC,EAASjI,EAAGiI,OAAQlF,EAAK/C,EAAGpB,QAASsJ,OAAyB,IAAPnF,EAAgB,GAAKA,EAAIoF,EAAKnI,EAAGoI,oBAAqBA,OAA6B,IAAPD,GAAwBA,EAAIpE,EAAc/D,EAAG+D,YACtSsE,EAAgB,YAAS,GAAIjB,GAC7BkB,EAAkB/C,OAAOC,OAAO,GAAI1E,EAAWuH,EAAcvH,WAEjE,cADOuH,EAAcvH,UACdjC,KAAKS,gBAAgBC,OAAOiI,OAAO,YAAS,CAAEK,SAAUA,EAC3DG,mBAAoBA,EAAoBO,eAAgBF,EAAcE,gBAAkB1J,KAAKI,aAAasJ,eAAgBH,oBAAqBA,EAC/IH,OAAQA,EAAQrJ,QAASsJ,EAAiBnE,YAAaA,EAAajD,UAAWwH,GAAmBD,KAE1GpB,EAAajI,UAAUqI,gBAAkB,WAChCxI,KAAK6B,OAAO0B,SAAYvD,KAAKI,aAAauJ,eAC3C3J,KAAK4J,aAAa,CACdrG,SAAS,EACT2C,WAAOtC,EACPD,UAAMC,EACNF,QAAQ,KAIpB0E,EAAajI,UAAU2I,oBAAsB,SAAUD,EAAUJ,GAC7D,IAAItH,EAAKnB,KAAKI,aAAc+G,EAAchG,EAAGgG,YAAawC,EAAgBxI,EAAGwI,cACzEhG,EAAOkF,EAASlF,KAAMoD,EAAS8B,EAAS9B,OACxCb,EAAQa,GAAUA,EAAOC,OAAS,EAChC,IAAI,IAAY,CAAEC,cAAeF,SACjCnD,EAIF5D,KAAK6J,qBAAqBpB,KAAgBkB,GAC1C3J,KAAK4J,aAAa,CACdlG,QAAQ,EACRH,SAAS,EACTI,KAAMA,EACNuC,MAAOA,IAPJiB,GAAcA,EAAYxD,IAYzCyE,EAAajI,UAAU4I,gBAAkB,SAAU7C,EAAOuC,GACtD,IAAIrB,EAAUpH,KAAKI,aAAagH,QAC5BpH,KAAK6J,qBAAqBpB,IAC1BzI,KAAK4J,aAAa,CACdrG,SAAS,EACT2C,MAAOA,EACPvC,UAAMC,EACNF,QAAQ,IAGZ0D,GACAA,EAAQlB,IAGhBkC,EAAajI,UAAUuI,sBAAwB,WAC3C,QAAS1I,KAAKkJ,sBAElBd,EAAajI,UAAU0J,qBAAuB,SAAUpB,GACpD,OAAOzI,KAAKkJ,uBAAyBT,GAEzCL,EAAajI,UAAUyJ,aAAe,SAAU/H,IACxC7B,KAAKC,WACHD,KAAKiG,gBAAmB,YAAMjG,KAAKiG,eAAgBpE,KACrD7B,KAAKqI,UAAUxG,GACf7B,KAAKiG,eAAiBpE,IApGf,CAwGjBhC,IAyBsB,SAAUqB,GAE9B,SAAS4I,EAAiB3I,GACtB,IAAIrB,EAAUqB,EAAGrB,QAASC,EAAUoB,EAAGpB,QAASsI,EAAYlH,EAAGkH,UAC3DhH,EAAQH,EAAOI,KAAKtB,KAAMF,EAASC,IAAYC,KAInD,OAHAqB,EAAMG,kBAAoB,GAC1BH,EAAMgH,UAAYA,EAClBhH,EAAM0I,WAAWjK,GACVuB,EAPX,YAAUyI,EAAkB5I,GAS5B4I,EAAiB3J,UAAU8C,QAAU,SAAUpB,GAC3C,IAA+B,IAA3B7B,KAAKI,aAAa8C,KAElB,OADAlD,KAAKY,UACE,CACH2C,SAAS,EACT2C,WAAOtC,EACPD,UAAMC,EACN3B,UAAWjC,KAAKI,aAAa6B,WAGrC,IAAI4E,EAAgBhF,EAChB7B,KAAKS,gBAAgBE,QACrBkG,EAAgB7G,KAAKgK,oBAEzB,IAAIC,EAAoBjK,KAAKI,aAAa6J,kBAgB1C,MAfiC,mBAAtBA,IACPA,IAAsBA,EAAkBjK,KAAKI,gBAEvB,IAAtB6J,GACAjK,KAAKE,iBACLwG,OAAOwD,KAAKlK,KAAKE,iBAAiB8G,OAAS,IAC1ChH,KAAKE,gBAAgB2F,eAAiB7F,KAAKI,aAAayF,eACpD,YAAM7F,KAAKE,gBAAgB+B,UAAWjC,KAAKI,aAAa6B,YACzDjC,KAAKE,gBAAgBgD,OAASlD,KAAKI,aAAa8C,QACpDlD,KAAKY,UACLiG,EAAgB7G,KAAKgK,oBAEzBhK,KAAK+J,WAAW/J,KAAKI,cACrBJ,KAAKmK,oBACLnK,KAAKE,gBAAkBF,KAAKI,aACrB,YAAS,YAAS,GAAIyG,GAAgB,CAAE5E,UAAWjC,KAAKI,aAAa6B,aAEhF6H,EAAiB3J,UAAU8D,aAAe,WACtCjE,KAAKC,WAAY,GAErB6J,EAAiB3J,UAAUS,QAAU,WACjCZ,KAAKoK,yBACEpK,KAAKwB,kBAAkBU,OAElC4H,EAAiB3J,UAAU4J,WAAa,SAAUjK,GAC1CE,KAAKwB,kBAAkBU,QAAoC,IAA3BlC,KAAKI,aAAa8C,OAEtDlD,KAAKwB,kBAAkBU,MAAQlC,KAAKS,gBAAgBC,OAAOqF,UAAU,CACjE7D,MAAOpC,EAAQ+F,aACf5D,UAAWnC,EAAQmC,UACnBiD,YAAapF,EAAQoF,gBAG7B4E,EAAiB3J,UAAUgK,kBAAoB,WACvCnK,KAAKwB,kBAAkBqE,eAE3B7F,KAAKwB,kBAAkBqE,aAAe7F,KAAKwB,kBAAkBU,MAAM6D,UAAU,CACzEC,KAAMhG,KAAKqK,kBAAkB9F,KAAKvE,MAClCkG,MAAOlG,KAAKsK,YAAY/F,KAAKvE,MAC7BuK,SAAUvK,KAAKwK,qBAAqBjG,KAAKvE,UAGjD8J,EAAiB3J,UAAU6J,iBAAmB,WAC1C,MAAO,CACHzG,SAAS,EACT2C,WAAOtC,EACPD,UAAMC,IAGdkG,EAAiB3J,UAAUyJ,aAAe,SAAU/H,GAC5C7B,KAAKC,WACLD,KAAKqI,UAAUxG,IAGvBiI,EAAiB3J,UAAUkK,kBAAoB,SAAUxI,GACrD,IAAI4I,EAAqBzK,KAAKI,aAAaqK,mBAC3CzK,KAAK4J,aAAa,CACdjG,KAAM9B,EAAO8B,KACbJ,SAAS,EACT2C,WAAOtC,IAEP6G,GACAA,EAAmB,CACf/J,OAAQV,KAAKS,gBAAgBC,OAC7BgK,iBAAkB7I,KAI9BiI,EAAiB3J,UAAUmK,YAAc,SAAUpE,GAC/ClG,KAAK4J,aAAa,CACd1D,MAAOA,EACP3C,SAAS,KAGjBuG,EAAiB3J,UAAUqK,qBAAuB,WAC9C,IAAIG,EAAyB3K,KAAKI,aAAauK,uBAC3CA,GACAA,IACJ3K,KAAKoK,mBAETN,EAAiB3J,UAAUiK,gBAAkB,WACrCpK,KAAKwB,kBAAkBqE,eACvB7F,KAAKwB,kBAAkBqE,aAAawB,qBAC7BrH,KAAKwB,kBAAkBqE,eA5GnB,CAgHrBhG,IA2CoB,WAClB,SAAS+K,IACL5K,KAAK6K,cAAgB,IAAIC,IACzB9K,KAAK+K,cAAgB,IAAID,IAE7BF,EAAezK,UAAUuF,sBAAwB,SAAUsF,EAAYC,GACnEjL,KAAKkL,gBAAgBD,GAAOD,WAAaA,GAE7CJ,EAAezK,UAAUmF,iBAAmB,SAAU2F,GAClD,OAAOjL,KAAKkL,gBAAgBD,GAAOD,YAEvCJ,EAAezK,UAAU2E,gBAAkB,SAAUqG,EAAeC,GAEhE,OADWpL,KAAKkL,gBAAgBC,EAAc/K,cACpCiL,KAMHD,KALHpL,KAAK6K,cAAcS,IAAIH,EAAc/K,aAAc,IAAImL,SAAQ,SAAUC,GACrEA,EAAQL,EAActH,iBAEnB,OAIf+G,EAAezK,UAAUsL,YAAc,WACnC,OAAOzL,KAAK6K,cAAca,KAAO,GAErCd,EAAezK,UAAUwL,wBAA0B,WAC/C,IAAItK,EAAQrB,KACR4L,EAAW,GAMf,OALA5L,KAAK6K,cAAcgB,SAAQ,SAAUC,EAASX,GAC1C9J,EAAM6J,gBAAgBC,GAAeE,MAAO,EAC5CO,EAASG,KAAKD,MAElB9L,KAAK6K,cAAcmB,QACZT,QAAQU,IAAIL,IAEvBhB,EAAezK,UAAU+K,gBAAkB,SAAUD,GACjD,IAAIF,EAAgB/K,KAAK+K,cACrB7I,EAAQ+I,EAAM/I,MAAOD,EAAYgJ,EAAMhJ,UACvCiK,EAASnB,EAAcoB,IAAIjK,IAAU,IAAI4I,IACxCC,EAAcqB,IAAIlK,IACnB6I,EAAcO,IAAIpJ,EAAOgK,GAC7B,IAAIG,EAAkBC,KAAKC,UAAUtK,GACjCuK,EAAON,EAAOC,IAAIE,IA9CnB,CACHhB,MAAM,EACNL,WAAY,MA+CZ,OAFKkB,EAAOE,IAAIC,IACZH,EAAOZ,IAAIe,EAAiBG,GACzBA,GA5CM","file":"0-modern.9029.js","sourcesContent":["import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = (function () {\n    function OperationData(options, context) {\n        this.isMounted = false;\n        this.previousOptions = {};\n        this.context = {};\n        this.options = {};\n        this.options = options || {};\n        this.context = context || {};\n    }\n    OperationData.prototype.getOptions = function () {\n        return this.options;\n    };\n    OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n        if (storePrevious === void 0) { storePrevious = false; }\n        if (storePrevious && !equal(this.options, newOptions)) {\n            this.previousOptions = this.options;\n        }\n        this.options = newOptions;\n    };\n    OperationData.prototype.unmount = function () {\n        this.isMounted = false;\n    };\n    OperationData.prototype.refreshClient = function () {\n        var client = (this.options && this.options.client) ||\n            (this.context && this.context.client);\n        process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n            'Wrap the root component in an <ApolloProvider>, or pass an ' +\n            'ApolloClient instance in via options.');\n        var isNew = false;\n        if (client !== this.client) {\n            isNew = true;\n            this.client = client;\n            this.cleanup();\n        }\n        return {\n            client: this.client,\n            isNew: isNew\n        };\n    };\n    OperationData.prototype.verifyDocumentType = function (document, type) {\n        var operation = parser(document);\n        var requiredOperationName = operationName(type);\n        var usedOperationName = operationName(operation.type);\n        process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" +\n            (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n    };\n    return OperationData;\n}());\n\nvar QueryData = (function (_super) {\n    __extends(QueryData, _super);\n    function QueryData(_a) {\n        var options = _a.options, context = _a.context, forceUpdate = _a.forceUpdate;\n        var _this = _super.call(this, options, context) || this;\n        _this.previousData = {};\n        _this.currentObservable = {};\n        _this.runLazy = false;\n        _this.runLazyQuery = function (options) {\n            _this.cleanup();\n            _this.runLazy = true;\n            _this.lazyOptions = options;\n            _this.forceUpdate();\n        };\n        _this.getExecuteResult = function () {\n            var result = _this.getQueryResult();\n            _this.startQuerySubscription();\n            return result;\n        };\n        _this.obsRefetch = function (variables) {\n            return _this.currentObservable.query.refetch(variables);\n        };\n        _this.obsFetchMore = function (fetchMoreOptions) { return _this.currentObservable.query.fetchMore(fetchMoreOptions); };\n        _this.obsUpdateQuery = function (mapFn) { return _this.currentObservable.query.updateQuery(mapFn); };\n        _this.obsStartPolling = function (pollInterval) {\n            _this.currentObservable &&\n                _this.currentObservable.query &&\n                _this.currentObservable.query.startPolling(pollInterval);\n        };\n        _this.obsStopPolling = function () {\n            _this.currentObservable &&\n                _this.currentObservable.query &&\n                _this.currentObservable.query.stopPolling();\n        };\n        _this.obsSubscribeToMore = function (options) { return _this.currentObservable.query.subscribeToMore(options); };\n        _this.forceUpdate = forceUpdate;\n        return _this;\n    }\n    QueryData.prototype.execute = function () {\n        this.refreshClient();\n        var _a = this.getOptions(), skip = _a.skip, query = _a.query;\n        if (skip || query !== this.previousData.query) {\n            this.removeQuerySubscription();\n            this.previousData.query = query;\n        }\n        this.updateObservableQuery();\n        if (this.isMounted)\n            this.startQuerySubscription();\n        return this.getExecuteSsrResult() || this.getExecuteResult();\n    };\n    QueryData.prototype.executeLazy = function () {\n        return !this.runLazy\n            ? [\n                this.runLazyQuery,\n                {\n                    loading: false,\n                    networkStatus: NetworkStatus.ready,\n                    called: false,\n                    data: undefined\n                }\n            ]\n            : [this.runLazyQuery, this.execute()];\n    };\n    QueryData.prototype.fetchData = function () {\n        var options = this.getOptions();\n        if (options.skip || options.ssr === false)\n            return false;\n        var obs = this.currentObservable.query;\n        var currentResult = obs.getCurrentResult();\n        return currentResult.loading ? obs.result() : false;\n    };\n    QueryData.prototype.afterExecute = function (_a) {\n        var _this = this;\n        var _b = (_a === void 0 ? {} : _a).lazy, lazy = _b === void 0 ? false : _b;\n        this.isMounted = true;\n        if (!lazy || this.runLazy) {\n            this.handleErrorOrCompleted();\n            setTimeout(function () {\n                _this.currentObservable.query &&\n                    _this.currentObservable.query.resetQueryStoreErrors();\n            });\n        }\n        this.previousOptions = this.getOptions();\n        return this.unmount.bind(this);\n    };\n    QueryData.prototype.cleanup = function () {\n        this.removeQuerySubscription();\n        delete this.currentObservable.query;\n        delete this.previousData.result;\n    };\n    QueryData.prototype.getOptions = function () {\n        var options = _super.prototype.getOptions.call(this);\n        if (this.lazyOptions) {\n            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n        }\n        if (this.runLazy) {\n            delete options.skip;\n        }\n        return options;\n    };\n    QueryData.prototype.getExecuteSsrResult = function () {\n        var treeRenderingInitiated = this.context && this.context.renderPromises;\n        var ssrDisabled = this.getOptions().ssr === false;\n        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n        var ssrLoading = {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n            called: true,\n            data: undefined\n        };\n        if (ssrDisabled && (treeRenderingInitiated || fetchDisabled)) {\n            return ssrLoading;\n        }\n        var result;\n        if (treeRenderingInitiated) {\n            result =\n                this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n        }\n        return result;\n    };\n    QueryData.prototype.prepareObservableQueryOptions = function () {\n        var options = this.getOptions();\n        this.verifyDocumentType(options.query, DocumentType.Query);\n        var displayName = options.displayName || 'Query';\n        if (this.context &&\n            this.context.renderPromises &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options.fetchPolicy = 'cache-first';\n        }\n        return __assign(__assign({}, options), { displayName: displayName, context: options.context, metadata: { reactComponent: { displayName: displayName } } });\n    };\n    QueryData.prototype.initializeObservableQuery = function () {\n        if (this.context && this.context.renderPromises) {\n            this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n        }\n        if (!this.currentObservable.query) {\n            var observableQueryOptions = this.prepareObservableQueryOptions();\n            this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: null });\n            this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n            if (this.context && this.context.renderPromises) {\n                this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n            }\n        }\n    };\n    QueryData.prototype.updateObservableQuery = function () {\n        if (!this.currentObservable.query) {\n            this.initializeObservableQuery();\n            return;\n        }\n        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: null });\n        if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n            this.previousData.observableQueryOptions = newObservableQueryOptions;\n            this.currentObservable\n                .query.setOptions(newObservableQueryOptions)\n                .catch(function () { });\n        }\n    };\n    QueryData.prototype.startQuerySubscription = function () {\n        var _this = this;\n        if (this.currentObservable.subscription || this.getOptions().skip)\n            return;\n        var obsQuery = this.currentObservable.query;\n        this.currentObservable.subscription = obsQuery.subscribe({\n            next: function (_a) {\n                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;\n                var previousResult = _this.previousData.result;\n                if (previousResult &&\n                    previousResult.loading === loading &&\n                    previousResult.networkStatus === networkStatus &&\n                    equal(previousResult.data, data)) {\n                    return;\n                }\n                _this.forceUpdate();\n            },\n            error: function (error) {\n                _this.resubscribeToQuery();\n                if (!error.hasOwnProperty('graphQLErrors'))\n                    throw error;\n                var previousResult = _this.previousData.result;\n                if ((previousResult && previousResult.loading) ||\n                    !equal(error, _this.previousData.error)) {\n                    _this.previousData.error = error;\n                    _this.forceUpdate();\n                }\n            }\n        });\n    };\n    QueryData.prototype.resubscribeToQuery = function () {\n        this.removeQuerySubscription();\n        var lastError = this.currentObservable.query.getLastError();\n        var lastResult = this.currentObservable.query.getLastResult();\n        this.currentObservable.query.resetLastResults();\n        this.startQuerySubscription();\n        Object.assign(this.currentObservable.query, {\n            lastError: lastError,\n            lastResult: lastResult\n        });\n    };\n    QueryData.prototype.getQueryResult = function () {\n        var result = this.observableQueryFields();\n        var options = this.getOptions();\n        if (options.skip) {\n            result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, called: true });\n        }\n        else {\n            var currentResult = this.currentObservable.query.getCurrentResult();\n            var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\n            var error = currentResult.error, data = currentResult.data;\n            if (errors && errors.length > 0) {\n                error = new ApolloError({ graphQLErrors: errors });\n            }\n            result = __assign(__assign({}, result), { loading: loading,\n                networkStatus: networkStatus,\n                error: error, called: true });\n            if (loading) {\n                var previousData = this.previousData.result && this.previousData.result.data;\n                result.data =\n                    previousData && data\n                        ? __assign(__assign({}, previousData), data) : previousData || data;\n            }\n            else if (error) {\n                Object.assign(result, {\n                    data: (this.currentObservable.query.getLastResult() || {})\n                        .data\n                });\n            }\n            else {\n                var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n                var partialRefetch = options.partialRefetch;\n                if (partialRefetch &&\n                    !data &&\n                    partial &&\n                    fetchPolicy !== 'cache-only') {\n                    Object.assign(result, {\n                        loading: true,\n                        networkStatus: NetworkStatus.loading\n                    });\n                    result.refetch();\n                    return result;\n                }\n                result.data = data;\n            }\n        }\n        result.client = this.client;\n        this.previousData.loading =\n            (this.previousData.result && this.previousData.result.loading) || false;\n        this.previousData.result = result;\n        return result;\n    };\n    QueryData.prototype.handleErrorOrCompleted = function () {\n        var obsQuery = this.currentObservable.query;\n        if (!obsQuery)\n            return;\n        var _a = obsQuery.getCurrentResult(), data = _a.data, loading = _a.loading, error = _a.error;\n        if (!loading) {\n            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError;\n            if (this.previousOptions &&\n                !this.previousData.loading &&\n                equal(this.previousOptions.query, query) &&\n                equal(this.previousOptions.variables, variables)) {\n                return;\n            }\n            if (onCompleted && !error) {\n                onCompleted(data);\n            }\n            else if (onError && error) {\n                onError(error);\n            }\n        }\n    };\n    QueryData.prototype.removeQuerySubscription = function () {\n        if (this.currentObservable.subscription) {\n            this.currentObservable.subscription.unsubscribe();\n            delete this.currentObservable.subscription;\n        }\n    };\n    QueryData.prototype.observableQueryFields = function () {\n        var observable = this.currentObservable.query;\n        return {\n            variables: observable.variables,\n            refetch: this.obsRefetch,\n            fetchMore: this.obsFetchMore,\n            updateQuery: this.obsUpdateQuery,\n            startPolling: this.obsStartPolling,\n            stopPolling: this.obsStopPolling,\n            subscribeToMore: this.obsSubscribeToMore\n        };\n    };\n    return QueryData;\n}(OperationData));\n\nfunction useDeepMemo(memoFn, key) {\n    var ref = useRef();\n    if (!ref.current || !equal(key, ref.current.key)) {\n        ref.current = { key: key, value: memoFn() };\n    }\n    return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n    if (lazy === void 0) { lazy = false; }\n    var context = useContext(getApolloContext());\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\n    var queryDataRef = useRef();\n    if (!queryDataRef.current) {\n        queryDataRef.current = new QueryData({\n            options: updatedOptions,\n            context: context,\n            forceUpdate: forceUpdate\n        });\n    }\n    var queryData = queryDataRef.current;\n    queryData.setOptions(updatedOptions);\n    queryData.context = context;\n    var memo = {\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\n        context: context,\n        tick: tick\n    };\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\n    var queryResult = lazy\n        ? result[1]\n        : result;\n    useEffect(function () { return queryData.afterExecute({ lazy: lazy }); }, [\n        queryResult.loading,\n        queryResult.networkStatus,\n        queryResult.error,\n        queryResult.data\n    ]);\n    useEffect(function () {\n        return function () { return queryData.cleanup(); };\n    }, []);\n    return result;\n}\n\nfunction useQuery(query, options) {\n    return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n    return useBaseQuery(query, options, true);\n}\n\nvar MutationData = (function (_super) {\n    __extends(MutationData, _super);\n    function MutationData(_a) {\n        var options = _a.options, context = _a.context, result = _a.result, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.runMutation = function (mutationFunctionOptions) {\n            if (mutationFunctionOptions === void 0) { mutationFunctionOptions = {}; }\n            _this.onMutationStart();\n            var mutationId = _this.generateNewMutationId();\n            return _this.mutate(mutationFunctionOptions)\n                .then(function (response) {\n                _this.onMutationCompleted(response, mutationId);\n                return response;\n            })\n                .catch(function (error) {\n                _this.onMutationError(error, mutationId);\n                if (!_this.getOptions().onError)\n                    throw error;\n            });\n        };\n        _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n        _this.result = result;\n        _this.setResult = setResult;\n        _this.mostRecentMutationId = 0;\n        return _this;\n    }\n    MutationData.prototype.execute = function (result) {\n        this.isMounted = true;\n        this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n        result.client = this.refreshClient().client;\n        return [this.runMutation, result];\n    };\n    MutationData.prototype.afterExecute = function () {\n        this.isMounted = true;\n        return this.unmount.bind(this);\n    };\n    MutationData.prototype.cleanup = function () {\n    };\n    MutationData.prototype.mutate = function (mutationFunctionOptions) {\n        var _a = this.getOptions(), mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, update = _a.update, _b = _a.context, mutationContext = _b === void 0 ? {} : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, fetchPolicy = _a.fetchPolicy;\n        var mutateOptions = __assign({}, mutationFunctionOptions);\n        var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n        delete mutateOptions.variables;\n        return this.refreshClient().client.mutate(__assign({ mutation: mutation,\n            optimisticResponse: optimisticResponse, refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries, awaitRefetchQueries: awaitRefetchQueries,\n            update: update, context: mutationContext, fetchPolicy: fetchPolicy, variables: mutateVariables }, mutateOptions));\n    };\n    MutationData.prototype.onMutationStart = function () {\n        if (!this.result.loading && !this.getOptions().ignoreResults) {\n            this.updateResult({\n                loading: true,\n                error: undefined,\n                data: undefined,\n                called: true\n            });\n        }\n    };\n    MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n        var _a = this.getOptions(), onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;\n        var data = response.data, errors = response.errors;\n        var error = errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : undefined;\n        var callOncomplete = function () {\n            return onCompleted ? onCompleted(data) : null;\n        };\n        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n            this.updateResult({\n                called: true,\n                loading: false,\n                data: data,\n                error: error\n            });\n        }\n        callOncomplete();\n    };\n    MutationData.prototype.onMutationError = function (error, mutationId) {\n        var onError = this.getOptions().onError;\n        if (this.isMostRecentMutation(mutationId)) {\n            this.updateResult({\n                loading: false,\n                error: error,\n                data: undefined,\n                called: true\n            });\n        }\n        if (onError) {\n            onError(error);\n        }\n    };\n    MutationData.prototype.generateNewMutationId = function () {\n        return ++this.mostRecentMutationId;\n    };\n    MutationData.prototype.isMostRecentMutation = function (mutationId) {\n        return this.mostRecentMutationId === mutationId;\n    };\n    MutationData.prototype.updateResult = function (result) {\n        if (this.isMounted &&\n            (!this.previousResult || !equal(this.previousResult, result))) {\n            this.setResult(result);\n            this.previousResult = result;\n        }\n    };\n    return MutationData;\n}(OperationData));\n\nfunction useMutation(mutation, options) {\n    var context = useContext(getApolloContext());\n    var _a = useState({ called: false, loading: false }), result = _a[0], setResult = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { mutation: mutation }) : { mutation: mutation };\n    var mutationDataRef = useRef();\n    function getMutationDataRef() {\n        if (!mutationDataRef.current) {\n            mutationDataRef.current = new MutationData({\n                options: updatedOptions,\n                context: context,\n                result: result,\n                setResult: setResult\n            });\n        }\n        return mutationDataRef.current;\n    }\n    var mutationData = getMutationDataRef();\n    mutationData.setOptions(updatedOptions);\n    mutationData.context = context;\n    useEffect(function () { return mutationData.afterExecute(); });\n    return mutationData.execute(result);\n}\n\nvar SubscriptionData = (function (_super) {\n    __extends(SubscriptionData, _super);\n    function SubscriptionData(_a) {\n        var options = _a.options, context = _a.context, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.currentObservable = {};\n        _this.setResult = setResult;\n        _this.initialize(options);\n        return _this;\n    }\n    SubscriptionData.prototype.execute = function (result) {\n        if (this.getOptions().skip === true) {\n            this.cleanup();\n            return {\n                loading: false,\n                error: undefined,\n                data: undefined,\n                variables: this.getOptions().variables\n            };\n        }\n        var currentResult = result;\n        if (this.refreshClient().isNew) {\n            currentResult = this.getLoadingResult();\n        }\n        var shouldResubscribe = this.getOptions().shouldResubscribe;\n        if (typeof shouldResubscribe === 'function') {\n            shouldResubscribe = !!shouldResubscribe(this.getOptions());\n        }\n        if (shouldResubscribe !== false &&\n            this.previousOptions &&\n            Object.keys(this.previousOptions).length > 0 &&\n            (this.previousOptions.subscription !== this.getOptions().subscription ||\n                !equal(this.previousOptions.variables, this.getOptions().variables) ||\n                this.previousOptions.skip !== this.getOptions().skip)) {\n            this.cleanup();\n            currentResult = this.getLoadingResult();\n        }\n        this.initialize(this.getOptions());\n        this.startSubscription();\n        this.previousOptions = this.getOptions();\n        return __assign(__assign({}, currentResult), { variables: this.getOptions().variables });\n    };\n    SubscriptionData.prototype.afterExecute = function () {\n        this.isMounted = true;\n    };\n    SubscriptionData.prototype.cleanup = function () {\n        this.endSubscription();\n        delete this.currentObservable.query;\n    };\n    SubscriptionData.prototype.initialize = function (options) {\n        if (this.currentObservable.query || this.getOptions().skip === true)\n            return;\n        this.currentObservable.query = this.refreshClient().client.subscribe({\n            query: options.subscription,\n            variables: options.variables,\n            fetchPolicy: options.fetchPolicy\n        });\n    };\n    SubscriptionData.prototype.startSubscription = function () {\n        if (this.currentObservable.subscription)\n            return;\n        this.currentObservable.subscription = this.currentObservable.query.subscribe({\n            next: this.updateCurrentData.bind(this),\n            error: this.updateError.bind(this),\n            complete: this.completeSubscription.bind(this)\n        });\n    };\n    SubscriptionData.prototype.getLoadingResult = function () {\n        return {\n            loading: true,\n            error: undefined,\n            data: undefined\n        };\n    };\n    SubscriptionData.prototype.updateResult = function (result) {\n        if (this.isMounted) {\n            this.setResult(result);\n        }\n    };\n    SubscriptionData.prototype.updateCurrentData = function (result) {\n        var onSubscriptionData = this.getOptions().onSubscriptionData;\n        this.updateResult({\n            data: result.data,\n            loading: false,\n            error: undefined\n        });\n        if (onSubscriptionData) {\n            onSubscriptionData({\n                client: this.refreshClient().client,\n                subscriptionData: result\n            });\n        }\n    };\n    SubscriptionData.prototype.updateError = function (error) {\n        this.updateResult({\n            error: error,\n            loading: false\n        });\n    };\n    SubscriptionData.prototype.completeSubscription = function () {\n        var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n        if (onSubscriptionComplete)\n            onSubscriptionComplete();\n        this.endSubscription();\n    };\n    SubscriptionData.prototype.endSubscription = function () {\n        if (this.currentObservable.subscription) {\n            this.currentObservable.subscription.unsubscribe();\n            delete this.currentObservable.subscription;\n        }\n    };\n    return SubscriptionData;\n}(OperationData));\n\nfunction useSubscription(subscription, options) {\n    var context = useContext(getApolloContext());\n    var updatedOptions = options\n        ? __assign(__assign({}, options), { subscription: subscription }) : { subscription: subscription };\n    var _a = useState({\n        loading: !updatedOptions.skip,\n        error: undefined,\n        data: undefined\n    }), result = _a[0], setResult = _a[1];\n    var subscriptionDataRef = useRef();\n    function getSubscriptionDataRef() {\n        if (!subscriptionDataRef.current) {\n            subscriptionDataRef.current = new SubscriptionData({\n                options: updatedOptions,\n                context: context,\n                setResult: setResult\n            });\n        }\n        return subscriptionDataRef.current;\n    }\n    var subscriptionData = getSubscriptionDataRef();\n    subscriptionData.setOptions(updatedOptions, true);\n    subscriptionData.context = context;\n    useEffect(function () { return subscriptionData.afterExecute(); });\n    useEffect(function () { return subscriptionData.cleanup.bind(subscriptionData); }, []);\n    return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n    var client = React.useContext(getApolloContext()).client;\n    process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' +\n        'have called `ApolloProvider` higher up in your tree.');\n    return client;\n}\n\nfunction makeDefaultQueryInfo() {\n    return {\n        seen: false,\n        observable: null\n    };\n}\nvar RenderPromises = (function () {\n    function RenderPromises() {\n        this.queryPromises = new Map();\n        this.queryInfoTrie = new Map();\n    }\n    RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n        this.lookupQueryInfo(props).observable = observable;\n    };\n    RenderPromises.prototype.getSSRObservable = function (props) {\n        return this.lookupQueryInfo(props).observable;\n    };\n    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n        var info = this.lookupQueryInfo(queryInstance.getOptions());\n        if (!info.seen) {\n            this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n                resolve(queryInstance.fetchData());\n            }));\n            return null;\n        }\n        return finish();\n    };\n    RenderPromises.prototype.hasPromises = function () {\n        return this.queryPromises.size > 0;\n    };\n    RenderPromises.prototype.consumeAndAwaitPromises = function () {\n        var _this = this;\n        var promises = [];\n        this.queryPromises.forEach(function (promise, queryInstance) {\n            _this.lookupQueryInfo(queryInstance).seen = true;\n            promises.push(promise);\n        });\n        this.queryPromises.clear();\n        return Promise.all(promises);\n    };\n    RenderPromises.prototype.lookupQueryInfo = function (props) {\n        var queryInfoTrie = this.queryInfoTrie;\n        var query = props.query, variables = props.variables;\n        var varMap = queryInfoTrie.get(query) || new Map();\n        if (!queryInfoTrie.has(query))\n            queryInfoTrie.set(query, varMap);\n        var variablesString = JSON.stringify(variables);\n        var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n        if (!varMap.has(variablesString))\n            varMap.set(variablesString, info);\n        return info;\n    };\n    return RenderPromises;\n}());\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };\n//# sourceMappingURL=react-hooks.esm.js.map\n"],"sourceRoot":""}